package org.gmod.gbol.simpleObject;

import java.util.Set;

/*
 * Autogenerated extension of org.gmod.gbol.simpleObject.generated.FeatureRelationship.
 * Add custom code to this file. 
 *
 * Author: Robert Bruggner, rbruggner@berkeleybop.org
 *
*/

public class FeatureRelationship extends org.gmod.gbol.simpleObject.generated.AbstractFeatureRelationship {

	private static final long serialVersionUID = 1L;

	public FeatureRelationship(){
		super();
	}
	
	/** Copy constructor.  Does a shallow copy from the source FeatureRelationship.
	 * 
	 * @param src - FeatureRelationship to copy the data from
	 */
	public FeatureRelationship(FeatureRelationship src)
	{
		setType(src.getType());
		setObjectFeature(src.getObjectFeature());
		setSubjectFeature(src.getSubjectFeature());
		setValue(src.getValue());
		setRank(src.getRank());
		setFeatureRelationshipProperties(src.getFeatureRelationshipProperties());
		setFeatureRelationshipPublications(src.getFeatureRelationshipPublications());
	}

	public FeatureRelationship(CVTerm type, Feature objectFeature,
			Feature subjectFeature, int rank) {
		super(type, objectFeature, subjectFeature, rank);
	}

	public FeatureRelationship(CVTerm type, Feature objectFeature,
			Feature subjectFeature, String value, int rank,
			Set<FeatureRelationshipProperty> featureRelationshipProperties,
			Set<FeatureRelationshipPublication> featureRelationshipPublications) {
		super(type, objectFeature, subjectFeature, value, rank,
				featureRelationshipProperties, featureRelationshipPublications);
	}

//	@Override
//	public Collection<AbstractSimpleObject> getWriteObjects() {
//		ArrayList<AbstractSimpleObject> writeObjects = new ArrayList<AbstractSimpleObject>();
//		// Have to write yourself
//		writeObjects.add(this);
//		
//		// Singletons
//		writeObjects.addAll(this.getType().getWriteObjects());
//		writeObjects.addAll(this.getSubjectFeature().getWriteObjects());
//		writeObjects.addAll(this.getObjectFeature().getWriteObjects());
//		
//		// Multiples
//		for (FeatureRelationshipProperty frprop : this.getFeatureRelationshipProperties())
//			writeObjects.addAll(frprop.getWriteObjects());
//		for (FeatureRelationshipPublication frpub : this.getFeatureRelationshipPublications())
//			writeObjects.addAll(frpub.getWriteObjects());
//		
//		return writeObjects;
//	}

	public AbstractSimpleObjectIterator getWriteableObjects()
	{
		return new SimpleObjectIterator(this);
	}
	
	private static class SimpleObjectIterator extends AbstractSimpleObjectIterator
	{
		private static class Status extends AbstractSimpleObjectIterator.Status
		{
			public static final int type = 1;
			public static final int subjectFeature = 2;
			public static final int objectFeature = 3;
			public static final int featureRelationshipProps = 4;
			public static final int featureRelationshipPubs = 5;
		}
				
		public SimpleObjectIterator(FeatureRelationship featureRelationship)
		{
			super(featureRelationship);
		}

		public AbstractSimpleObject next()
		{
			FeatureRelationship featureRelationship = (FeatureRelationship)object;
			AbstractSimpleObject retVal = null;
			if (status != Status.self) {
				retVal = soIter.next();
				if (status == Status.notSet) {
					processCollectionIterators(Status.featureRelationshipPubs, featureRelationship.getFeatureRelationshipPublications());
				}
				if (status == Status.featureRelationshipPubs) {
					processCollectionIterators(Status.featureRelationshipProps, featureRelationship.getFeatureRelationshipProperties());
				}
				if (status == Status.featureRelationshipPubs) {
					processSingletonIterator(Status.objectFeature, featureRelationship.getObjectFeature());
				}
				if (status == Status.objectFeature) {
					AbstractSimpleObject newClone = processSingletonIterator(Status.subjectFeature, featureRelationship.getSubjectFeature());
					((FeatureRelationship)clone).setObjectFeature((Feature) newClone);
				}
				if (status == Status.subjectFeature) {
					AbstractSimpleObject newClone = processSingletonIterator(Status.type, featureRelationship.getType());
					((FeatureRelationship)clone).setSubjectFeature((Feature) newClone);
				}
				if (status == Status.type) {
					AbstractSimpleObject newClone = processLastSingletonIterator();
					((FeatureRelationship)clone).setType((CVTerm) newClone);
				}
			} else {
				retVal = peek();
				status = Status.done;
			}
			current = retVal;
			return retVal;
		}

	}

	/** Get a string representation of this feature relationship.  It returns a string of the following
	 * format: subject_feature --type--> object_feature.
	 *  
	 *  @return String representation of this feature
	 */
	@Override
	public String toString() {
		return String.format("%s --%s--> %s", getSubjectFeature().toString(), getType().toString(),
				getObjectFeature().toString());
	}

}
